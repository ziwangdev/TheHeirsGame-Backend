#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('theheirsbackend:server');
var http = require('http');
// Firebase instance and references
const firebaseApp = require('../utils/firebaseInstance').instance;
const roomsRef = firebaseApp.database().ref('rooms');
const databaseRef = firebaseApp.database().ref();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
exports.server = server;

// Socket.io configuration and methods
var roomsLocalData = require('../utils/rooms');
const io = require("socket.io")(server, {
    cors: {
        origin: "*", // handling cors for all client addresses
        // origin: "http://localhost:3001" also works but only for port 3001 on localhost
        methods: ["GET", "POST"]
    }
});

// CONNECTION
io.on('connection', (socket) => {
    // Let sockets join a room corresponding to the roomID in game
    console.log('*--- a user connected ---*')
    let roomID = socket.handshake.query.roomID;
    // console.log(socket.handshake.query.roomID);
    socket.join(roomID);
    // Add roomID to local memory
    roomsLocalData.addRoom(roomID);
    // DISCONNECTION
    socket.on('disconnect', () => {
        console.log('*--- user disconnected ---*');
    })
});

// Listen for game update in each room
roomsRef.on('value', (snapshot) => {
    console.log('Got new game data! Sending data to rooms now.');
    let rooms = roomsLocalData.rooms;
    let snapshotVal = snapshot.val();
    console.log(snapshotVal);
    for(const key in snapshotVal){
        let gameData = snapshotVal[key];
        let roomID = gameData.roomID;
        if (rooms.includes(roomID)){
            // Send game data to sockets in this room
            io.to(roomID).emit('gameDataUpdate', gameData);
            console.log('Sent game data update to sockets in room ' + roomID);
        }
    }
})

module.exports.broadcastMessage = function (message){

};


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
